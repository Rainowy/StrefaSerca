var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (b, a, d) {b != Array.prototype && b != Object.prototype && (b[a] = d.value)};
$jscomp.getGlobal = function (b) {return "undefined" != typeof window && window === b ? b : "undefined" != typeof global && null != global ? global : b};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function () {
    $jscomp.initSymbol = function () {};
    $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol)
};
$jscomp.Symbol = function () {
    var b = 0;
    return function (a) {return $jscomp.SYMBOL_PREFIX + (a || "") + b++}
}();
$jscomp.initSymbolIterator = function () {
    $jscomp.initSymbol();
    var b = $jscomp.global.Symbol.iterator;
    b || (b = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
    "function" != typeof Array.prototype[b] && $jscomp.defineProperty(Array.prototype, b, {
        configurable: !0,
        writable: !0,
        value: function () {return $jscomp.arrayIterator(this)}
    });
    $jscomp.initSymbolIterator = function () {}
};
$jscomp.arrayIterator = function (b) {
    var a = 0;
    return $jscomp.iteratorPrototype(function () {
        return a < b.length ? {
            done: !1,
            value: b[a++]
        } : {done: !0}
    })
};
$jscomp.iteratorPrototype = function (b) {
    $jscomp.initSymbolIterator();
    b = {next: b};
    b[$jscomp.global.Symbol.iterator] = function () {return this};
    return b
};
$jscomp.makeIterator = function (b) {
    $jscomp.initSymbolIterator();
    var a = b[Symbol.iterator];
    return a ? a.call(b) : $jscomp.arrayIterator(b)
};
$jscomp.polyfill = function (b, a, d, e) {
    if (a) {
        d = $jscomp.global;
        b = b.split(".");
        for (e = 0; e < b.length - 1; e++) {
            var c = b[e];
            c in d || (d[c] = {});
            d = d[c]
        }
        b = b[b.length - 1];
        e = d[b];
        a = a(e);
        a != e && null != a && $jscomp.defineProperty(d, b, {
            configurable: !0,
            writable: !0,
            value: a
        })
    }
};
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function (b) {
    function a() {this.batch_ = null}

    function d(a) {return a instanceof c ? a : new c(function (g, b) {g(a)})}

    if (b && !$jscomp.FORCE_POLYFILL_PROMISE) return b;
    a.prototype.asyncExecute = function (a) {
        null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_());
        this.batch_.push(a);
        return this
    };
    a.prototype.asyncExecuteBatch_ = function () {
        var a = this;
        this.asyncExecuteFunction(function () {a.executeBatch_()})
    };
    var e = $jscomp.global.setTimeout;
    a.prototype.asyncExecuteFunction = function (a) {
        e(a,
            0)
    };
    a.prototype.executeBatch_ = function () {
        for (; this.batch_ && this.batch_.length;) {
            var a = this.batch_;
            this.batch_ = [];
            for (var b = 0; b < a.length; ++b) {
                var d = a[b];
                delete a[b];
                try {
                    d()
                } catch (k) {
                    this.asyncThrow_(k)
                }
            }
        }
        this.batch_ = null
    };
    a.prototype.asyncThrow_ = function (a) {this.asyncExecuteFunction(function () {throw a;})};
    var c = function (a) {
        this.state_ = 0;
        this.result_ = void 0;
        this.onSettledCallbacks_ = [];
        var b = this.createResolveAndReject_();
        try {
            a(b.resolve, b.reject)
        } catch (f) {
            b.reject(f)
        }
    };
    c.prototype.createResolveAndReject_ =
        function () {
            function a(a) {return function (c) {d || (d = !0, a.call(b, c))}}

            var b = this,
                d = !1;
            return {
                resolve: a(this.resolveTo_),
                reject: a(this.reject_)
            }
        };
    c.prototype.resolveTo_ = function (a) {
        if (a === this) this.reject_(new TypeError("A Promise cannot resolve to itself")); else if (a instanceof c) this.settleSameAsPromise_(a); else {
            a:switch (typeof a) {
                case "object":
                    var b = null != a;
                    break a;
                case "function":
                    b = !0;
                    break a;
                default:
                    b = !1
            }
            b ? this.resolveToNonPromiseObj_(a) : this.fulfill_(a)
        }
    };
    c.prototype.resolveToNonPromiseObj_ = function (a) {
        var b =
            void 0;
        try {
            b = a.then
        } catch (f) {
            this.reject_(f);
            return
        }
        "function" == typeof b ? this.settleSameAsThenable_(b, a) : this.fulfill_(a)
    };
    c.prototype.reject_ = function (a) {this.settle_(2, a)};
    c.prototype.fulfill_ = function (a) {this.settle_(1, a)};
    c.prototype.settle_ = function (a, b) {
        if (0 != this.state_) throw Error("Cannot settle(" + a + ", " + b | "): Promise already settled in state" + this.state_);
        this.state_ = a;
        this.result_ = b;
        this.executeOnSettledCallbacks_()
    };
    c.prototype.executeOnSettledCallbacks_ = function () {
        if (null != this.onSettledCallbacks_) {
            for (var a =
                this.onSettledCallbacks_, b = 0; b < a.length; ++b) a[b].call(), a[b] = null;
            this.onSettledCallbacks_ = null
        }
    };
    var l = new a;
    c.prototype.settleSameAsPromise_ = function (a) {
        var b = this.createResolveAndReject_();
        a.callWhenSettled_(b.resolve, b.reject)
    };
    c.prototype.settleSameAsThenable_ = function (a, b) {
        var d = this.createResolveAndReject_();
        try {
            a.call(b, d.resolve, d.reject)
        } catch (k) {
            d.reject(k)
        }
    };
    c.prototype.then = function (a, b) {
        function d(a, b) {
            return "function" == typeof a ? function (b) {
                try {
                    e(a(b))
                } catch (m) {
                    g(m)
                }
            } : b
        }

        var e,
            g,
            h = new c(function (a,
                                b) {
                e = a;
                g = b
            });
        this.callWhenSettled_(d(a, e), d(b, g));
        return h
    };
    c.prototype.catch = function (a) {return this.then(void 0, a)};
    c.prototype.callWhenSettled_ = function (a, b) {
        function d() {
            switch (c.state_) {
                case 1:
                    a(c.result_);
                    break;
                case 2:
                    b(c.result_);
                    break;
                default:
                    throw Error("Unexpected state: " + c.state_);
            }
        }

        var c = this;
        null == this.onSettledCallbacks_ ? l.asyncExecute(d) : this.onSettledCallbacks_.push(function () {l.asyncExecute(d)})
    };
    c.resolve = d;
    c.reject = function (a) {return new c(function (b, d) {d(a)})};
    c.race = function (a) {
        return new c(function (b,
                               c) {for (var e = $jscomp.makeIterator(a), f = e.next(); !f.done; f = e.next()) d(f.value).callWhenSettled_(b, c)})
    };
    c.all = function (a) {
        var b = $jscomp.makeIterator(a),
            e = b.next();
        return e.done ? d([]) : new c(function (a, c) {
            function f(b) {
                return function (d) {
                    g[b] = d;
                    h--;
                    0 == h && a(g)
                }
            }

            var g = [],
                h = 0;
            do g.push(void 0), h++, d(e.value).callWhenSettled_(f(g.length - 1), c), e = b.next(); while (!e.done)
        })
    };
    return c
}, "es6", "es3");
$jscomp.iteratorFromArray = function (b, a) {
    $jscomp.initSymbolIterator();
    b instanceof String && (b += "");
    var d = 0,
        e = {
            next: function () {
                if (d < b.length) {
                    var c = d++;
                    return {
                        value: a(c, b[c]),
                        done: !1
                    }
                }
                e.next = function () {
                    return {
                        done: !0,
                        value: void 0
                    }
                };
                return e.next()
            }
        };
    e[Symbol.iterator] = function () {return e};
    return e
};
$jscomp.polyfill("Array.prototype.keys", function (b) {return b ? b : function () {return $jscomp.iteratorFromArray(this, function (a) {return a})}}, "es6", "es3");
var _createClass = function () {
    function b(a, b) {
        for (var d = 0; d < b.length; d++) {
            var c = b[d];
            c.enumerable = c.enumerable || !1;
            c.configurable = !0;
            "value" in c && (c.writable = !0);
            Object.defineProperty(a, c.key, c)
        }
    }

    return function (a, d, e) {
        d && b(a.prototype, d);
        e && b(a, e);
        return a
    }
}();

function _classCallCheck(b, a) {if (!(b instanceof a)) throw new TypeError("Cannot call a class as a function");}

var PatientsPlugin = function () {
    function b() {
        _classCallCheck(this, b);
        this.appHost = "http://127.0.0.1:8080";
        this.pluginHost = "";
        this.appName = "drw";
        this.styleId = "mydr-pp-style";
        this.rootClass = "mydr-pp-root";
        this.btnClass = "btn-mydr-pp";
        this.modalClass = "mydr-pp-modal";
        this.closeBtnClass = "btn-mydr-pp-close"
    }

    _createClass(b, [{
        key: "init",
        value: function () {
            var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
            this.appHost = a.app || "http://127.0.0.1:8080";
            this.pluginHost = a.plugin || this.appHost;
            this.createStyles();
            this.createRoot();
            "loading" != document.readyState ? this.initButtons() : document.addEventListener("DOMContentLoaded", this.initButtons())
        }
    }, {
        key: "createStyles",
        value: function () {
            var a = document.getElementById(this.styleId);
            if (!a) {
                a = document.createElement("link");
                a.id = this.styleId;
                a.type = "text/css";
                a.rel = "stylesheet";
                // a.href = this.pluginHost + "/css/mydr-pp.min.css";
                a.href = "/css/mydr-pp.min.css"
                var b = document.getElementsByTagName("head")[0];
                b.insertBefore(a, b.childNodes[0])
            }
        }
    }, {
        key: "createRoot",
        value: function
            () {
            var a = document.querySelector("." +
                this.rootClass);
            a || (a = document.createElement("div"), a.className = this.rootClass, document.body.appendChild(a))
        }
    },
        {
            key: "initButtons",
            value
:

    function () {
        var a = this,
            b = document.querySelectorAll("." + this.btnClass);
        b.length ? b.forEach(function (b) {b.onclick = a.openModal.bind(a)}) : console.error('[MyDr patient plugin] MyDr buttons not found! Please include at least one\n            \x3cbutton class\x3d"' + this.btnClass + '" data-token\x3d"(...)" data-appname\x3d"' + this.appName + '"\x3e\x3c/button\x3e in your source code')
    }
}
,
    {
        key: "createModal",
            value
    :

        function (a) {
            var b = this;
            return new Promise(function (d, c) {
                b.buildUrl(a.dataset).then(function (e) {
                    var g = document.querySelector("." + b.rootClass),
                        h = b.generateRand(10);
                    a.dataset.modal = h;
                    var f;
                    if ((f = document.getElementById(h)) || !g) c(); else {
                        f = document.createElement("div");
                        f.id = h;
                        f.className = b.modalClass;
                        var k = document.createElement("div");
                        k.innerText = "\u2715";
                        k.className = b.closeBtnClass;
                        k.dataset.modal = h;
                        k.onclick = b.closeModal.bind(b);
                        f.appendChild(k);
                        f.appendChild(b.createIframe(e));
                        f.appendChild(b.createLoader());
                        g.appendChild(f);
                        d()
                    }
                }).catch(function (a) {
                    b.newError(a);
                    c()
                })
            })
        }
    }
,
    {
        key: "buildUrl",
            value
    :

        function (a) {
            var b = this;
            return new Promise(function (d, c) {
                var e = a.token,
                    g = a.appname;
                if (!e || !g) return c("required data attribiutes");
                var h = b.appHost + "?remote_app\x3d" + g + "\x26access_token\x3d" + e;
                Object.keys(a).forEach(function (b) {"token" !== b && "appname" !== b && "modal" !== b && (h = h + "\x26" + b + "\x3d" + a[b].toLowerCase())});
                return d(h)
            })
        }
    }
,
    {
        key: "createIframe",
            value
    :

        function (a) {
            var b = this,
                e = document.createElement("iframe");
            e.src = a;
            e.onload = function () {b.removeLoader()};
            return e
        }
    }
,
    {
        key: "createLoader",
            value
    :

        function () {
            var a = document.createElement("DIV"),
                b = document.createElement("DIV"),
                e = document.createElement("DIV");
            a.className = "mydr-pp-loader";
            b.className = "mydr-pp-loader__inner";
            e.className = "mydr-pp-loader__logo";
            a.appendChild(e);
            a.appendChild(b);
            return a
        }
    }
,
    {
        key: "removeLoader",
            value
    :

        function () {
            var a = document.querySelector(".mydr-pp-loader");
            a && a.remove()
        }
    }
,
    {
        key: "openModal",
            value
    :

        function (a) {
            var b = this;
            this.createModal(a.target).then(function () {
                var d =
                        document.querySelector("." + b.rootClass),
                    c = document.getElementById(a.target.dataset.modal);
                d.style.display = "flex";
                c.style.display = "flex";
                document.body.style.overflow = "hidden"
            }).catch(function (a) {b.newError(a)})
        }
    }
,
    {
        key: "closeModal",
            value
    :

        function (a) {
            var b = document.querySelector("." + this.rootClass);
            (a = document.getElementById(a.target.dataset.modal)) && a.remove();
            b.style.display = "none";
            document.body.style.overflow = ""
        }
    }
,
    {
        key: "newError",
            value
    :

        function (a) {
            switch (a) {
                case "required data attribiutes":
                    a = "MyDr button element don't have required data attribiutes! Please follow the pattern\n                \x3cbutton class\x3d\"" +
                        this.btnClass + '" data-token\x3d"(...)" data-appname\x3d"' + this.appName + '"\x3e\x3c/button\x3e';
                    break;
                default:
                    a = "Something went wrong. Please contact with MyDr support"
            }
            console.error("[MyDr patient plugin] " + a)
        }
    }
,
    {
        key: "generateRand",
            value
    :

        function (a) {
            for (var b = "", e = 0; e < a; e += 1) b += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62 * Math.random()));
            return b
        }
    }
])
    ;
    return b
}
();
window.PatientsPlugin = PatientsPlugin;